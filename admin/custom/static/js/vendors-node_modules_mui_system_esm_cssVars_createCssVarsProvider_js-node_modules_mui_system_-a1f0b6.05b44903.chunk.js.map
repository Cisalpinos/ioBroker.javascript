{"version":3,"file":"static/js/vendors-node_modules_mui_system_esm_cssVars_createCssVarsProvider_js-node_modules_mui_system_-a1f0b6.05b44903.chunk.js","mappings":"8XAEO,MAAMA,EAA2B,OAC3BC,EAAmC,eACnCC,EAAoB,oBAClB,SAAS,EAAyBC,EAAS,CACxD,KAAM,CACJ,YAAAC,EAAc,QACd,wBAAAC,EAA0B,QAC1B,uBAAAC,EAAyB,OACzB,eAAAC,EAAiBP,EACjB,sBAAAQ,EAAwBP,EACxB,UAAAQ,EAAYP,EACZ,gBAAAQ,EAAkB,0BACpB,EAAIP,GAAW,CAAC,EAChB,SAAoB,OAAK,SAAU,CAEjC,wBAAyB,CACvB,OAAQ;AAAA;AAAA,qCAEuBI,CAAc,UAAUH,CAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CAM5BI,CAAqB,eAAeF,CAAsB;AAAA;AAAA,4CAE1DE,CAAqB,gBAAgBH,CAAuB;AAAA;AAAA;AAAA;AAAA,0CAI9DG,CAAqB,gBAAgBH,CAAuB;AAAA;AAAA;AAAA,0CAG5DG,CAAqB,eAAeF,CAAsB;AAAA;AAAA;AAAA,MAG9FI,CAAe,kBAAkBD,CAAS;AAAA;AAAA,kBAG5C,CACF,EAAG,uBAAuB,CAC5B,CCtCO,SAASE,EAAcC,EAAM,CAClC,GAAI,OAAO,QAAW,aAAeA,IAAS,SAE5C,OADY,OAAO,WAAW,8BAA8B,EACpD,QACC,OAEF,OAGX,CACA,SAASC,EAAaC,EAAOC,EAAU,CACrC,GAAID,EAAM,OAAS,SAAWA,EAAM,OAAS,UAAYA,EAAM,aAAe,QAC5E,OAAOC,EAAS,OAAO,EAEzB,GAAID,EAAM,OAAS,QAAUA,EAAM,OAAS,UAAYA,EAAM,aAAe,OAC3E,OAAOC,EAAS,MAAM,CAG1B,CACO,SAASC,EAAeF,EAAO,CACpC,OAAOD,EAAaC,EAAOF,GAAQ,CACjC,GAAIA,IAAS,QACX,OAAOE,EAAM,iBAEf,GAAIF,IAAS,OACX,OAAOE,EAAM,eAGjB,CAAC,CACH,CACA,SAASG,EAAgBC,EAAKC,EAAc,CAC1C,GAAI,OAAO,QAAW,YACpB,OAEF,IAAIC,EACJ,GAAI,CACFA,EAAQ,aAAa,QAAQF,CAAG,GAAK,OAChCE,GAEH,aAAa,QAAQF,EAAKC,CAAY,CAE1C,OAASE,EAAG,CAEZ,CACA,OAAOD,GAASD,CAClB,CACe,SAASG,EAAsBnB,EAAS,CACrD,KAAM,CACJ,YAAAC,EAAc,QACd,wBAAAC,EACA,uBAAAC,EACA,sBAAAiB,EAAwB,CAAC,EACzB,eAAAhB,EAAiBP,EACjB,sBAAAQ,EAAwBP,EACxB,cAAAuB,EAAgB,OAAO,QAAW,YAAc,OAAY,MAC9D,EAAIrB,EACEsB,EAAqBF,EAAsB,KAAK,GAAG,EACnD,CAACT,EAAOY,CAAQ,EAAI,WAAe,IAAM,CAC7C,MAAMC,EAAcV,EAAgBV,EAAgBH,CAAW,EACzDwB,EAAmBX,EAAgB,GAAGT,CAAqB,SAAUH,CAAuB,EAC5FwB,EAAkBZ,EAAgB,GAAGT,CAAqB,QAASF,CAAsB,EAC/F,MAAO,CACL,KAAMqB,EACN,WAAYhB,EAAcgB,CAAW,EACrC,iBAAAC,EACA,gBAAAC,CACF,CACF,CAAC,EACKC,EAAcd,EAAeF,CAAK,EAClCiB,EAAU,cAAkBnB,GAAQ,CACxCc,EAASM,GAAgB,CACvB,GAAIpB,IAASoB,EAAa,KAExB,OAAOA,EAET,MAAMC,EAAUrB,GAAQ,KAAOA,EAAOR,EACtC,GAAI,CACF,aAAa,QAAQG,EAAgB0B,CAAO,CAC9C,OAASZ,EAAG,CAEZ,CACA,SAAO,KAAS,CAAC,EAAGW,EAAc,CAChC,KAAMC,EACN,WAAYtB,EAAcsB,CAAO,CACnC,CAAC,CACH,CAAC,CACH,EAAG,CAAC1B,EAAgBH,CAAW,CAAC,EAC1B8B,EAAiB,cAAkBd,GAAS,CAC3CA,EAaM,OAAOA,GAAU,SACtBA,GAAS,CAACK,EAAmB,SAASL,CAAK,EAC7C,QAAQ,MAAM,KAAKA,CAAK,8CAA8C,EAEtEM,EAASM,GAAgB,CACvB,MAAMG,KAAW,KAAS,CAAC,EAAGH,CAAY,EAC1C,OAAAnB,EAAamB,EAAcpB,GAAQ,CACjC,GAAI,CACF,aAAa,QAAQ,GAAGJ,CAAqB,IAAII,CAAI,GAAIQ,CAAK,CAChE,OAASC,EAAG,CAEZ,CACIT,IAAS,UACXuB,EAAS,iBAAmBf,GAE1BR,IAAS,SACXuB,EAAS,gBAAkBf,EAE/B,CAAC,EACMe,CACT,CAAC,EAGHT,EAASM,GAAgB,CACvB,MAAMG,KAAW,KAAS,CAAC,EAAGH,CAAY,EACpCI,EAAsBhB,EAAM,QAAU,KAAOf,EAA0Be,EAAM,MAC7EiB,EAAqBjB,EAAM,OAAS,KAAOd,EAAyBc,EAAM,KAChF,GAAIgB,EACF,GAAI,CAACX,EAAmB,SAASW,CAAmB,EAClD,QAAQ,MAAM,KAAKA,CAAmB,8CAA8C,MAC/E,CACLD,EAAS,iBAAmBC,EAC5B,GAAI,CACF,aAAa,QAAQ,GAAG5B,CAAqB,SAAU4B,CAAmB,CAC5E,OAASE,GAAO,CAEhB,CACF,CAEF,GAAID,EACF,GAAI,CAACZ,EAAmB,SAASY,CAAkB,EACjD,QAAQ,MAAM,KAAKA,CAAkB,8CAA8C,MAC9E,CACLF,EAAS,gBAAkBE,EAC3B,GAAI,CACF,aAAa,QAAQ,GAAG7B,CAAqB,QAAS6B,CAAkB,CAC1E,OAASC,GAAO,CAEhB,CACF,CAEF,OAAOH,CACT,CAAC,EAhEDT,EAASM,GAAgB,CACvB,GAAI,CACF,aAAa,QAAQ,GAAGxB,CAAqB,SAAUH,CAAuB,EAC9E,aAAa,QAAQ,GAAGG,CAAqB,QAASF,CAAsB,CAC9E,OAASe,EAAG,CAEZ,CACA,SAAO,KAAS,CAAC,EAAGW,EAAc,CAChC,iBAAkB3B,EAClB,gBAAiBC,CACnB,CAAC,CACH,CAAC,CAuDL,EAAG,CAACmB,EAAoBjB,EAAuBH,EAAyBC,CAAsB,CAAC,EACzFiC,EAAmB,cAAkBC,GAAS,CAC9C1B,EAAM,OAAS,UACjBY,EAASM,GAAgB,CACvB,MAAMS,EAAaD,GAAS,MAAQA,EAAM,QAAU,OAAS,QAG7D,OAAIR,EAAa,aAAeS,EACvBT,KAEF,KAAS,CAAC,EAAGA,EAAc,CAChC,WAAAS,CACF,CAAC,CACH,CAAC,CAEL,EAAG,CAAC3B,EAAM,IAAI,CAAC,EAGT4B,EAAgB,SAAaH,CAAgB,EACnD,OAAAG,EAAc,QAAUH,EACxB,YAAgB,IAAM,CACpB,MAAMI,EAAU,IAAIC,IAASF,EAAc,QAAQ,GAAGE,CAAI,EAGpDC,EAAQ,OAAO,WAAW,8BAA8B,EAG9D,OAAAA,EAAM,YAAYF,CAAO,EACzBA,EAAQE,CAAK,EACN,IAAM,CACXA,EAAM,eAAeF,CAAO,CAC9B,CACF,EAAG,CAAC,CAAC,EAGL,YAAgB,IAAM,CACpB,GAAInB,EAAe,CACjB,MAAMsB,EAAgBN,GAAS,CAC7B,MAAMpB,EAAQoB,EAAM,SAChB,OAAOA,EAAM,KAAQ,UAAYA,EAAM,IAAI,WAAWhC,CAAqB,IAAM,CAACY,GAASK,EAAmB,MAAML,CAAK,KAEvHoB,EAAM,IAAI,SAAS,OAAO,GAC5BN,EAAe,CACb,MAAOd,CACT,CAAC,EAECoB,EAAM,IAAI,SAAS,MAAM,GAC3BN,EAAe,CACb,KAAMd,CACR,CAAC,GAGDoB,EAAM,MAAQjC,IAAmB,CAACa,GAAS,CAAC,QAAS,OAAQ,QAAQ,EAAE,SAASA,CAAK,IACvFW,EAAQX,GAAShB,CAAW,CAEhC,EAEA,OAAAoB,EAAc,iBAAiB,UAAWsB,CAAa,EAChD,IAAM,CACXtB,EAAc,oBAAoB,UAAWsB,CAAa,CAC5D,CACF,CAEF,EAAG,CAACZ,EAAgBH,EAASxB,EAAgBC,EAAuBiB,EAAoBrB,EAAaoB,CAAa,CAAC,KAC5G,KAAS,CAAC,EAAGV,EAAO,CACzB,YAAAgB,EACA,QAAAC,EACA,eAAAG,CACF,CAAC,CACH,CClOA,MAAMa,EAAY,CAAC,eAAgB,aAAc,kBAAmB,cAAc,EAWrEC,EAAyB,2JACvB,SAASC,EAAsB9C,EAAS,CACrD,KAAM,CACJ,QAAA+C,EAOA,MAAOC,EAAe,CAAC,EACvB,UAAWC,EAAmBlD,EAC9B,eAAgBmD,EAAwBrD,EACxC,sBAAuBsD,EAA+BrD,EACtD,YAAasD,EAAmB,QAChC,mBAAoBC,EACpB,0BAA2BC,EAAiC,GAC5D,aAAAC,EACA,yBAAAC,CACF,EAAIxD,GACA,CAACgD,EAAa,cAAgB,OAAOK,GAA4B,UAAY,CAACL,EAAa,aAAaK,CAAuB,GAAK,OAAOA,GAA4B,UAAY,CAACL,EAAa,aAAaK,GAA2B,KAAO,OAASA,EAAwB,KAAK,GAAK,OAAOA,GAA4B,UAAY,CAACL,EAAa,aAAaK,GAA2B,KAAO,OAASA,EAAwB,IAAI,IAC9a,QAAQ,MAAM,UAAUA,CAAuB,8CAA8C,EAE/F,MAAMI,EAAkC,gBAAoB,MAAS,EAI/DC,EAAiB,IAAM,CAC3B,MAAMzC,EAAQ,aAAiBwC,CAAkB,EACjD,GAAI,CAACxC,EACH,MAAM,IAAI,SAAmH,KAAuB,EAAE,CAAC,EAEzJ,OAAOA,CACT,EACA,SAAS0C,EAAgBC,EAAO,CAC9B,KAAM,CACJ,SAAAC,EACA,MAAOC,EAAYd,EACnB,eAAA5C,EAAiB8C,EACjB,sBAAA7C,GAAwB8C,EACxB,UAAA7C,EAAY2C,EACZ,YAAAhD,EAAcmD,EACd,mBAAAW,EAAqBV,EACrB,0BAAAW,GAA4BV,EAC5B,cAAAjC,GAAgB,OAAO,QAAW,YAAc,OAAY,OAC5D,aAAA4C,EAAe,OAAO,UAAa,YAAc,OAAY,SAC7D,gBAAA1D,GAAkB,OAAO,UAAa,YAAc,OAAY,SAAS,gBACzE,oBAAA2D,GAAsB,QACtB,qBAAAC,GAAuB,GACvB,4BAAAC,GAA8B,EAChC,EAAIR,EACES,GAAa,SAAa,EAAK,EAC/BC,MAAa,KAAY,EACzBC,GAAM,aAAiBd,CAAkB,EACzCe,GAAS,CAAC,CAACD,IAAO,CAACJ,GACnBM,GAAcX,EAAUf,CAAO,EAC/B2B,GAAOD,IAAeX,EAC1B,CACE,aAAAa,GAAe,CAAC,EAChB,WAAAC,GAAa,CAAC,EACd,gBAAAC,GAAkB,KAAO,CACvB,KAAM,CAAC,EACP,IAAK,CAAC,CACR,GACA,aAAAC,EACF,EAAIJ,GACJK,MAAgB,KAA8BL,GAAM9B,CAAS,EACzDoC,GAAkB,OAAO,KAAKL,EAAY,EAC1CzE,GAA0B,OAAO6D,GAAuB,SAAWA,EAAqBA,EAAmB,MAC3G5D,GAAyB,OAAO4D,GAAuB,SAAWA,EAAqBA,EAAmB,KAG1G,CACJ,KAAMkB,GACN,QAAArD,GACA,WAAAU,GACA,iBAAAb,GACA,gBAAAC,GACA,YAAawD,GACb,eAAAnD,EACF,EAAIZ,EAAsB,CACxB,sBAAuB6D,GACvB,wBAAA9E,GACA,uBAAAC,GACA,eAAAC,EACA,sBAAAC,GACA,YAAAJ,EACA,cAAAoB,EACF,CAAC,EACD,IAAIZ,EAAOwE,GACPtD,EAAcuD,GACdV,KACF/D,EAAO8D,GAAI,KACX5C,EAAc4C,GAAI,aAEpB,MAAMY,GACA1E,IAIAR,IAAgB,SACXmD,EAEFnD,GAEHmF,GACCzD,IAECwD,KAAmB,OACdhF,GAGFD,IAML,CACJ,IAAKmF,GACL,KAAMC,EACR,EAAIT,GAAgB,EAGdU,KAAQ,KAAS,CAAC,EAAGR,GAAe,CACxC,WAAAH,GACA,aAAAD,GACA,aAAAG,GACA,KAAMQ,GACN,uBAAwBE,GAAqB,IAAIlF,CAAS,KAAKkF,CAAiB,MAClF,CAAC,EAKKC,GAA+B,CAAC,EAChCC,GAA8B,CAAC,EACrC,OAAO,QAAQf,EAAY,EAAE,QAAQ,CAAC,CAAC5D,EAAK4E,CAAM,IAAM,CACtD,KAAM,CACJ,IAAAC,GACA,KAAAC,EACF,EAAIhB,GAAgB9D,CAAG,EACvBwE,EAAM,QAAOO,EAAA,GAAUP,EAAM,KAAMM,EAAI,EACnC9E,IAAQqE,KAEV,OAAO,KAAKO,CAAM,EAAE,QAAQI,GAAa,CACnCJ,EAAOI,CAAS,GAAK,OAAOJ,EAAOI,CAAS,GAAM,SAEpDR,EAAMQ,CAAS,KAAI,KAAS,CAAC,EAAGR,EAAMQ,CAAS,EAAGJ,EAAOI,CAAS,CAAC,EAEnER,EAAMQ,CAAS,EAAIJ,EAAOI,CAAS,CAEvC,CAAC,EACGR,EAAM,UACRA,EAAM,QAAQ,YAAcxE,IAGhC,MAAMiF,GACA,OAAOjC,GAAuB,SACzBA,EAEL9D,IAAgB,OACX8D,EAAmB,KAErBA,EAAmB,MAE5B,GAAIhD,IAAQiF,GAA4B,CACtC,GAAIxC,EAA0B,CAC5B,MAAMyC,EAAoB,CAAC,EAC3BzC,EAAyBsB,EAAY,EAAE,QAAQoB,IAAU,CACvDD,EAAkBC,EAAM,EAAIN,GAAIM,EAAM,EACtC,OAAON,GAAIM,EAAM,CACnB,CAAC,EACDT,GAA6B,IAAInF,CAAS,KAAKS,CAAG,IAAI,EAAIkF,CAC5D,CACAR,GAA6B,GAAGvB,EAAmB,MAAM5D,CAAS,KAAKS,CAAG,IAAI,EAAI6E,EACpF,MACEF,GAA4B,GAAGxB,KAAwB,QAAU,GAAKA,EAAmB,IAAI5D,CAAS,KAAKS,CAAG,IAAI,EAAI6E,EAE1H,CAAC,EACDL,EAAM,QAAOO,EAAA,GAAUP,EAAM,KAAMD,EAAQ,EAI3C,YAAgB,IAAM,CAChB3D,GAAepB,IAEjBA,GAAgB,aAAaD,EAAWqB,CAAW,CAEvD,EAAG,CAACA,EAAarB,EAAWC,EAAe,CAAC,EAI5C,YAAgB,IAAM,CACpB,IAAI4F,EACJ,GAAInC,IAA6BK,GAAW,SAAWJ,EAAc,CACnE,MAAM2B,EAAM3B,EAAa,cAAc,OAAO,EAC9C2B,EAAI,YAAY3B,EAAa,eAAepB,CAAsB,CAAC,EACnEoB,EAAa,KAAK,YAAY2B,CAAG,EAG1B,OAAO,iBAAiB3B,EAAa,IAAI,EAChDkC,EAAQ,WAAW,IAAM,CACvBlC,EAAa,KAAK,YAAY2B,CAAG,CACnC,EAAG,CAAC,CACN,CACA,MAAO,IAAM,CACX,aAAaO,CAAK,CACpB,CACF,EAAG,CAACxE,EAAaqC,GAA2BC,CAAY,CAAC,EACzD,YAAgB,KACdI,GAAW,QAAU,GACd,IAAM,CACXA,GAAW,QAAU,EACvB,GACC,CAAC,CAAC,EACL,MAAM+B,GAAe,UAAc,KAAO,CACxC,gBAAApB,GACA,YAAArD,EACA,gBAAAD,GACA,iBAAAD,GACA,KAAAhB,EACA,eAAAsB,GACA,QAAAH,GACA,WAAAU,EACF,GAAI,CAAC0C,GAAiBrD,EAAaD,GAAiBD,GAAkBhB,EAAMsB,GAAgBH,GAASU,EAAU,CAAC,EAChH,IAAI+D,GAA2B,IAC3BjC,IAA+BI,KAAWF,IAAc,KAAO,OAASA,GAAW,gBAAkBQ,MACvGuB,GAA2B,IAE7B,MAAMC,MAAuB,QAAM,WAAgB,CACjD,SAAU,CAACD,OAAyC,QAAM,WAAgB,CACxE,SAAU,IAAc,OAAKE,EAAA,EAAc,CACzC,OAAQ,CACN,CAACrC,EAAmB,EAAGmB,EACzB,CACF,CAAC,KAAgB,OAAKkB,EAAA,EAAc,CAClC,OAAQd,EACV,CAAC,KAAgB,OAAKc,EAAA,EAAc,CAClC,OAAQb,EACV,CAAC,CAAC,CACJ,CAAC,KAAgB,OAAKc,GAAA,EAAe,CACnC,QAAS/B,GAAc1B,EAAU,OACjC,MAAOQ,EAAeA,EAAagC,CAAK,EAAIA,EAC5C,SAAU1B,CACZ,CAAC,CAAC,CACJ,CAAC,EACD,OAAIW,GACK8B,MAEW,OAAK7C,EAAmB,SAAU,CACpD,MAAO2C,GACP,SAAUE,EACZ,CAAC,CACH,CA8DA,MAAMpG,EAA0B,OAAOmD,GAA4B,SAAWA,EAA0BA,EAAwB,MAC1HlD,EAAyB,OAAOkD,GAA4B,SAAWA,EAA0BA,EAAwB,KAS/H,MAAO,CACL,gBAAAM,EACA,eAAAD,EACA,yBAX+B+C,GAAU,KAA+B,KAAS,CACjF,UAAWxD,EACX,sBAAuBE,EACvB,YAAaC,EACb,wBAAAlD,EACA,uBAAAC,EACA,eAAgB+C,CAClB,EAAGuD,CAAM,CAAC,CAKV,CACF,C,oCCrVe,SAASC,EAAgBC,EAAS,GAAI,CACnD,SAASC,KAAaf,EAAM,CAC1B,GAAI,CAACA,EAAK,OACR,MAAO,GAET,MAAM5E,EAAQ4E,EAAK,CAAC,EACpB,OAAI,OAAO5E,GAAU,UAAY,CAACA,EAAM,MAAM,6GAA6G,EAClJ,WAAW0F,EAAS,GAAGA,CAAM,IAAM,EAAE,GAAG1F,CAAK,GAAG2F,EAAU,GAAGf,EAAK,MAAM,CAAC,CAAC,CAAC,IAE7E,KAAK5E,CAAK,EACnB,CAMA,MAHkB,CAAC4F,KAAUC,IACpB,SAASH,EAAS,GAAGA,CAAM,IAAM,EAAE,GAAGE,CAAK,GAAGD,EAAU,GAAGE,CAAS,CAAC,GAGhF,C,oFCJO,MAAMC,EAAmB,CAACC,EAAKC,EAAMhG,EAAOiG,EAAY,CAAC,IAAM,CACpE,IAAIC,EAAOH,EACXC,EAAK,QAAQ,CAACG,EAAGC,IAAU,CACrBA,IAAUJ,EAAK,OAAS,EACtB,MAAM,QAAQE,CAAI,EACpBA,EAAK,OAAOC,CAAC,CAAC,EAAInG,EACTkG,GAAQ,OAAOA,GAAS,WACjCA,EAAKC,CAAC,EAAInG,GAEHkG,GAAQ,OAAOA,GAAS,WAC5BA,EAAKC,CAAC,IACTD,EAAKC,CAAC,EAAIF,EAAU,SAASE,CAAC,EAAI,CAAC,EAAI,CAAC,GAE1CD,EAAOA,EAAKC,CAAC,EAEjB,CAAC,CACH,EAaaE,EAAiB,CAACN,EAAKpG,EAAU2G,IAAoB,CAChE,SAASC,EAAQC,EAAQC,EAAa,CAAC,EAAGR,EAAY,CAAC,EAAG,CACxD,OAAO,QAAQO,CAAM,EAAE,QAAQ,CAAC,CAAC1G,EAAKE,CAAK,IAAM,EAC3C,CAACsG,GAAmBA,GAAmB,CAACA,EAAgB,CAAC,GAAGG,EAAY3G,CAAG,CAAC,IACnDE,GAAU,OAC/B,OAAOA,GAAU,UAAY,OAAO,KAAKA,CAAK,EAAE,OAAS,EAC3DuG,EAAQvG,EAAO,CAAC,GAAGyG,EAAY3G,CAAG,EAAG,MAAM,QAAQE,CAAK,EAAI,CAAC,GAAGiG,EAAWnG,CAAG,EAAImG,CAAS,EAE3FtG,EAAS,CAAC,GAAG8G,EAAY3G,CAAG,EAAGE,EAAOiG,CAAS,EAIvD,CAAC,CACH,CACAM,EAAQR,CAAG,CACb,EACMW,EAAc,CAACV,EAAMhG,IACrB,OAAOA,GAAU,SACf,CAAC,aAAc,aAAc,UAAW,QAAQ,EAAE,KAAK2G,GAAQX,EAAK,SAASW,CAAI,CAAC,GAItEX,EAAKA,EAAK,OAAS,CAAC,EACxB,YAAY,EAAE,QAAQ,SAAS,GAAK,EAEvChG,EAEF,GAAGA,CAAK,KAEVA,EAyBM,SAAS4G,EAActC,EAAOvF,EAAS,CACpD,KAAM,CACJ,OAAA2G,EACA,wBAAAmB,CACF,EAAI9H,GAAW,CAAC,EACV4F,EAAM,CAAC,EACPC,EAAO,CAAC,EACRkC,EAAmB,CAAC,EAC1B,OAAAT,EAAe/B,EAAO,CAAC0B,EAAMhG,EAAOiG,IAAc,CAChD,IAAI,OAAOjG,GAAU,UAAY,OAAOA,GAAU,YAC5C,CAAC6G,GAA2B,CAACA,EAAwBb,EAAMhG,CAAK,GAAG,CAErE,MAAMiF,EAAS,KAAKS,EAAS,GAAGA,CAAM,IAAM,EAAE,GAAGM,EAAK,KAAK,GAAG,CAAC,GAC/D,OAAO,OAAOrB,EAAK,CACjB,CAACM,CAAM,EAAGyB,EAAYV,EAAMhG,CAAK,CACnC,CAAC,EACD8F,EAAiBlB,EAAMoB,EAAM,OAAOf,CAAM,IAAKgB,CAAS,EACxDH,EAAiBgB,EAAkBd,EAAM,OAAOf,CAAM,KAAKjF,CAAK,IAAKiG,CAAS,CAChF,CAEJ,EAAGD,GAAQA,EAAK,CAAC,IAAM,MACvB,EACO,CACL,IAAArB,EACA,KAAAC,EACA,iBAAAkC,CACF,CACF,CC5HA,MAAMnF,GAAY,CAAC,eAAgB,aAAc,oBAAoB,EAGrE,SAASoF,EAAezC,EAAO0C,EAAc,CAE3C,KAAM,CACF,aAAAtD,EAAe,CAAC,EAChB,mBAAAZ,EAAqB,OACvB,EAAIwB,EACJ2C,KAAa,KAA8B3C,EAAO3C,EAAS,EACvD,CACJ,KAAM0C,EACN,IAAKD,EACL,iBAAkB8C,CACpB,EAAIN,EAAcK,EAAYD,CAAY,EAC1C,IAAIG,EAAYD,EAChB,MAAME,EAAkB,CAAC,EACnB,CACF,CAACtE,CAAkB,EAAGuE,CACxB,EAAI3D,EACJ4D,KAAoB,KAA8B5D,EAAc,CAACZ,CAAkB,EAAE,IAAI,GAAc,CAAC,EAa1G,GAZA,OAAO,QAAQwE,GAAqB,CAAC,CAAC,EAAE,QAAQ,CAAC,CAACxH,EAAK4E,CAAM,IAAM,CACjE,KAAM,CACJ,KAAAE,EACA,IAAAD,EACA,iBAAAmC,CACF,EAAIF,EAAclC,EAAQsC,CAAY,EACtCG,KAAYtC,EAAA,GAAUsC,EAAWL,CAAgB,EACjDM,EAAgBtH,CAAG,EAAI,CACrB,IAAA6E,EACA,KAAAC,CACF,CACF,CAAC,EACGyC,EAAO,CAET,KAAM,CACJ,IAAA1C,EACA,KAAAC,EACA,iBAAAkC,CACF,EAAIF,EAAcS,EAAOL,CAAY,EACrCG,KAAYtC,EAAA,GAAUsC,EAAWL,CAAgB,EACjDM,EAAgBtE,CAAkB,EAAI,CACpC,IAAA6B,EACA,KAAAC,CACF,CACF,CAmBA,MAAO,CACL,KAAMuC,EACN,gBApBsBzG,GAAe,CACrC,IAAI6G,EACJ,GAAI,CAAC7G,EAAa,CAChB,IAAI8G,EACJ,MAAM7C,KAAM,KAAS,CAAC,EAAGP,CAAO,EAChC,MAAO,CACL,IAAAO,EACA,KAAMN,EACN,UAAW2C,GAAgB,OAASQ,EAAwBR,EAAa,cAAgB,KAAO,OAASQ,EAAsB,KAAKR,EAActG,EAAaiE,CAAG,IAAM,OAC1K,CACF,CACA,MAAMA,KAAM,KAAS,CAAC,EAAGyC,EAAgB1G,CAAW,EAAE,GAAG,EACzD,MAAO,CACL,IAAAiE,EACA,KAAMyC,EAAgB1G,CAAW,EAAE,KACnC,UAAWsG,GAAgB,OAASO,EAAyBP,EAAa,cAAgB,KAAO,OAASO,EAAuB,KAAKP,EAActG,EAAaiE,CAAG,IAAM,OAC5K,CACF,CAIA,CACF,CACA,QAAeoC,C","sources":["../node_modules/@mui/system/esm/cssVars/getInitColorSchemeScript.js","../node_modules/@mui/system/esm/cssVars/useCurrentColorScheme.js","../node_modules/@mui/system/esm/cssVars/createCssVarsProvider.js","../node_modules/@mui/system/esm/cssVars/createGetCssVar.js","../node_modules/@mui/system/esm/cssVars/cssVarsParser.js","../node_modules/@mui/system/esm/cssVars/prepareCssVars.js"],"sourcesContent":["import * as React from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const DEFAULT_MODE_STORAGE_KEY = 'mode';\nexport const DEFAULT_COLOR_SCHEME_STORAGE_KEY = 'color-scheme';\nexport const DEFAULT_ATTRIBUTE = 'data-color-scheme';\nexport default function getInitColorSchemeScript(options) {\n  const {\n    defaultMode = 'light',\n    defaultLightColorScheme = 'light',\n    defaultDarkColorScheme = 'dark',\n    modeStorageKey = DEFAULT_MODE_STORAGE_KEY,\n    colorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY,\n    attribute = DEFAULT_ATTRIBUTE,\n    colorSchemeNode = 'document.documentElement'\n  } = options || {};\n  return /*#__PURE__*/_jsx(\"script\", {\n    // eslint-disable-next-line react/no-danger\n    dangerouslySetInnerHTML: {\n      __html: `(function() {\ntry {\n  var mode = localStorage.getItem('${modeStorageKey}') || '${defaultMode}';\n  var colorScheme = '';\n  if (mode === 'system') {\n    // handle system mode\n    var mql = window.matchMedia('(prefers-color-scheme: dark)');\n    if (mql.matches) {\n      colorScheme = localStorage.getItem('${colorSchemeStorageKey}-dark') || '${defaultDarkColorScheme}';\n    } else {\n      colorScheme = localStorage.getItem('${colorSchemeStorageKey}-light') || '${defaultLightColorScheme}';\n    }\n  }\n  if (mode === 'light') {\n    colorScheme = localStorage.getItem('${colorSchemeStorageKey}-light') || '${defaultLightColorScheme}';\n  }\n  if (mode === 'dark') {\n    colorScheme = localStorage.getItem('${colorSchemeStorageKey}-dark') || '${defaultDarkColorScheme}';\n  }\n  if (colorScheme) {\n    ${colorSchemeNode}.setAttribute('${attribute}', colorScheme);\n  }\n} catch(e){}})();`\n    }\n  }, \"mui-color-scheme-init\");\n}","'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { DEFAULT_MODE_STORAGE_KEY, DEFAULT_COLOR_SCHEME_STORAGE_KEY } from './getInitColorSchemeScript';\nexport function getSystemMode(mode) {\n  if (typeof window !== 'undefined' && mode === 'system') {\n    const mql = window.matchMedia('(prefers-color-scheme: dark)');\n    if (mql.matches) {\n      return 'dark';\n    }\n    return 'light';\n  }\n  return undefined;\n}\nfunction processState(state, callback) {\n  if (state.mode === 'light' || state.mode === 'system' && state.systemMode === 'light') {\n    return callback('light');\n  }\n  if (state.mode === 'dark' || state.mode === 'system' && state.systemMode === 'dark') {\n    return callback('dark');\n  }\n  return undefined;\n}\nexport function getColorScheme(state) {\n  return processState(state, mode => {\n    if (mode === 'light') {\n      return state.lightColorScheme;\n    }\n    if (mode === 'dark') {\n      return state.darkColorScheme;\n    }\n    return undefined;\n  });\n}\nfunction initializeValue(key, defaultValue) {\n  if (typeof window === 'undefined') {\n    return undefined;\n  }\n  let value;\n  try {\n    value = localStorage.getItem(key) || undefined;\n    if (!value) {\n      // the first time that user enters the site.\n      localStorage.setItem(key, defaultValue);\n    }\n  } catch (e) {\n    // Unsupported\n  }\n  return value || defaultValue;\n}\nexport default function useCurrentColorScheme(options) {\n  const {\n    defaultMode = 'light',\n    defaultLightColorScheme,\n    defaultDarkColorScheme,\n    supportedColorSchemes = [],\n    modeStorageKey = DEFAULT_MODE_STORAGE_KEY,\n    colorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY,\n    storageWindow = typeof window === 'undefined' ? undefined : window\n  } = options;\n  const joinedColorSchemes = supportedColorSchemes.join(',');\n  const [state, setState] = React.useState(() => {\n    const initialMode = initializeValue(modeStorageKey, defaultMode);\n    const lightColorScheme = initializeValue(`${colorSchemeStorageKey}-light`, defaultLightColorScheme);\n    const darkColorScheme = initializeValue(`${colorSchemeStorageKey}-dark`, defaultDarkColorScheme);\n    return {\n      mode: initialMode,\n      systemMode: getSystemMode(initialMode),\n      lightColorScheme,\n      darkColorScheme\n    };\n  });\n  const colorScheme = getColorScheme(state);\n  const setMode = React.useCallback(mode => {\n    setState(currentState => {\n      if (mode === currentState.mode) {\n        // do nothing if mode does not change\n        return currentState;\n      }\n      const newMode = mode != null ? mode : defaultMode;\n      try {\n        localStorage.setItem(modeStorageKey, newMode);\n      } catch (e) {\n        // Unsupported\n      }\n      return _extends({}, currentState, {\n        mode: newMode,\n        systemMode: getSystemMode(newMode)\n      });\n    });\n  }, [modeStorageKey, defaultMode]);\n  const setColorScheme = React.useCallback(value => {\n    if (!value) {\n      setState(currentState => {\n        try {\n          localStorage.setItem(`${colorSchemeStorageKey}-light`, defaultLightColorScheme);\n          localStorage.setItem(`${colorSchemeStorageKey}-dark`, defaultDarkColorScheme);\n        } catch (e) {\n          // Unsupported\n        }\n        return _extends({}, currentState, {\n          lightColorScheme: defaultLightColorScheme,\n          darkColorScheme: defaultDarkColorScheme\n        });\n      });\n    } else if (typeof value === 'string') {\n      if (value && !joinedColorSchemes.includes(value)) {\n        console.error(`\\`${value}\\` does not exist in \\`theme.colorSchemes\\`.`);\n      } else {\n        setState(currentState => {\n          const newState = _extends({}, currentState);\n          processState(currentState, mode => {\n            try {\n              localStorage.setItem(`${colorSchemeStorageKey}-${mode}`, value);\n            } catch (e) {\n              // Unsupported\n            }\n            if (mode === 'light') {\n              newState.lightColorScheme = value;\n            }\n            if (mode === 'dark') {\n              newState.darkColorScheme = value;\n            }\n          });\n          return newState;\n        });\n      }\n    } else {\n      setState(currentState => {\n        const newState = _extends({}, currentState);\n        const newLightColorScheme = value.light === null ? defaultLightColorScheme : value.light;\n        const newDarkColorScheme = value.dark === null ? defaultDarkColorScheme : value.dark;\n        if (newLightColorScheme) {\n          if (!joinedColorSchemes.includes(newLightColorScheme)) {\n            console.error(`\\`${newLightColorScheme}\\` does not exist in \\`theme.colorSchemes\\`.`);\n          } else {\n            newState.lightColorScheme = newLightColorScheme;\n            try {\n              localStorage.setItem(`${colorSchemeStorageKey}-light`, newLightColorScheme);\n            } catch (error) {\n              // Unsupported\n            }\n          }\n        }\n        if (newDarkColorScheme) {\n          if (!joinedColorSchemes.includes(newDarkColorScheme)) {\n            console.error(`\\`${newDarkColorScheme}\\` does not exist in \\`theme.colorSchemes\\`.`);\n          } else {\n            newState.darkColorScheme = newDarkColorScheme;\n            try {\n              localStorage.setItem(`${colorSchemeStorageKey}-dark`, newDarkColorScheme);\n            } catch (error) {\n              // Unsupported\n            }\n          }\n        }\n        return newState;\n      });\n    }\n  }, [joinedColorSchemes, colorSchemeStorageKey, defaultLightColorScheme, defaultDarkColorScheme]);\n  const handleMediaQuery = React.useCallback(event => {\n    if (state.mode === 'system') {\n      setState(currentState => {\n        const systemMode = event != null && event.matches ? 'dark' : 'light';\n\n        // Early exit, nothing changed.\n        if (currentState.systemMode === systemMode) {\n          return currentState;\n        }\n        return _extends({}, currentState, {\n          systemMode\n        });\n      });\n    }\n  }, [state.mode]);\n\n  // Ref hack to avoid adding handleMediaQuery as a dep\n  const mediaListener = React.useRef(handleMediaQuery);\n  mediaListener.current = handleMediaQuery;\n  React.useEffect(() => {\n    const handler = (...args) => mediaListener.current(...args);\n\n    // Always listen to System preference\n    const media = window.matchMedia('(prefers-color-scheme: dark)');\n\n    // Intentionally use deprecated listener methods to support iOS & old browsers\n    media.addListener(handler);\n    handler(media);\n    return () => {\n      media.removeListener(handler);\n    };\n  }, []);\n\n  // Handle when localStorage has changed\n  React.useEffect(() => {\n    if (storageWindow) {\n      const handleStorage = event => {\n        const value = event.newValue;\n        if (typeof event.key === 'string' && event.key.startsWith(colorSchemeStorageKey) && (!value || joinedColorSchemes.match(value))) {\n          // If the key is deleted, value will be null then reset color scheme to the default one.\n          if (event.key.endsWith('light')) {\n            setColorScheme({\n              light: value\n            });\n          }\n          if (event.key.endsWith('dark')) {\n            setColorScheme({\n              dark: value\n            });\n          }\n        }\n        if (event.key === modeStorageKey && (!value || ['light', 'dark', 'system'].includes(value))) {\n          setMode(value || defaultMode);\n        }\n      };\n      // For syncing color-scheme changes between iframes\n      storageWindow.addEventListener('storage', handleStorage);\n      return () => {\n        storageWindow.removeEventListener('storage', handleStorage);\n      };\n    }\n    return undefined;\n  }, [setColorScheme, setMode, modeStorageKey, colorSchemeStorageKey, joinedColorSchemes, defaultMode, storageWindow]);\n  return _extends({}, state, {\n    colorScheme,\n    setMode,\n    setColorScheme\n  });\n}","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _formatMuiErrorMessage from \"@mui/utils/formatMuiErrorMessage\";\nconst _excluded = [\"colorSchemes\", \"components\", \"generateCssVars\", \"cssVarPrefix\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport deepmerge from '@mui/utils/deepmerge';\nimport { GlobalStyles } from '@mui/styled-engine';\nimport { useTheme as muiUseTheme } from '@mui/private-theming';\nimport ThemeProvider from '../ThemeProvider';\nimport systemGetInitColorSchemeScript, { DEFAULT_ATTRIBUTE, DEFAULT_COLOR_SCHEME_STORAGE_KEY, DEFAULT_MODE_STORAGE_KEY } from './getInitColorSchemeScript';\nimport useCurrentColorScheme from './useCurrentColorScheme';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const DISABLE_CSS_TRANSITION = '*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}';\nexport default function createCssVarsProvider(options) {\n  const {\n    themeId,\n    /**\n     * This `theme` object needs to follow a certain structure to\n     * be used correctly by the finel `CssVarsProvider`. It should have a\n     * `colorSchemes` key with the light and dark (and any other) palette.\n     * It should also ideally have a vars object created using `prepareCssVars`.\n     */\n    theme: defaultTheme = {},\n    attribute: defaultAttribute = DEFAULT_ATTRIBUTE,\n    modeStorageKey: defaultModeStorageKey = DEFAULT_MODE_STORAGE_KEY,\n    colorSchemeStorageKey: defaultColorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY,\n    defaultMode: designSystemMode = 'light',\n    defaultColorScheme: designSystemColorScheme,\n    disableTransitionOnChange: designSystemTransitionOnChange = false,\n    resolveTheme,\n    excludeVariablesFromRoot\n  } = options;\n  if (!defaultTheme.colorSchemes || typeof designSystemColorScheme === 'string' && !defaultTheme.colorSchemes[designSystemColorScheme] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.light] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.dark]) {\n    console.error(`MUI: \\`${designSystemColorScheme}\\` does not exist in \\`theme.colorSchemes\\`.`);\n  }\n  const ColorSchemeContext = /*#__PURE__*/React.createContext(undefined);\n  if (process.env.NODE_ENV !== 'production') {\n    ColorSchemeContext.displayName = 'ColorSchemeContext';\n  }\n  const useColorScheme = () => {\n    const value = React.useContext(ColorSchemeContext);\n    if (!value) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: \\`useColorScheme\\` must be called under <CssVarsProvider />` : _formatMuiErrorMessage(19));\n    }\n    return value;\n  };\n  function CssVarsProvider(props) {\n    const {\n      children,\n      theme: themeProp = defaultTheme,\n      modeStorageKey = defaultModeStorageKey,\n      colorSchemeStorageKey = defaultColorSchemeStorageKey,\n      attribute = defaultAttribute,\n      defaultMode = designSystemMode,\n      defaultColorScheme = designSystemColorScheme,\n      disableTransitionOnChange = designSystemTransitionOnChange,\n      storageWindow = typeof window === 'undefined' ? undefined : window,\n      documentNode = typeof document === 'undefined' ? undefined : document,\n      colorSchemeNode = typeof document === 'undefined' ? undefined : document.documentElement,\n      colorSchemeSelector = ':root',\n      disableNestedContext = false,\n      disableStyleSheetGeneration = false\n    } = props;\n    const hasMounted = React.useRef(false);\n    const upperTheme = muiUseTheme();\n    const ctx = React.useContext(ColorSchemeContext);\n    const nested = !!ctx && !disableNestedContext;\n    const scopedTheme = themeProp[themeId];\n    const _ref = scopedTheme || themeProp,\n      {\n        colorSchemes = {},\n        components = {},\n        generateCssVars = () => ({\n          vars: {},\n          css: {}\n        }),\n        cssVarPrefix\n      } = _ref,\n      restThemeProp = _objectWithoutPropertiesLoose(_ref, _excluded);\n    const allColorSchemes = Object.keys(colorSchemes);\n    const defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\n    const defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark;\n\n    // 1. Get the data about the `mode`, `colorScheme`, and setter functions.\n    const {\n      mode: stateMode,\n      setMode,\n      systemMode,\n      lightColorScheme,\n      darkColorScheme,\n      colorScheme: stateColorScheme,\n      setColorScheme\n    } = useCurrentColorScheme({\n      supportedColorSchemes: allColorSchemes,\n      defaultLightColorScheme,\n      defaultDarkColorScheme,\n      modeStorageKey,\n      colorSchemeStorageKey,\n      defaultMode,\n      storageWindow\n    });\n    let mode = stateMode;\n    let colorScheme = stateColorScheme;\n    if (nested) {\n      mode = ctx.mode;\n      colorScheme = ctx.colorScheme;\n    }\n    const calculatedMode = (() => {\n      if (mode) {\n        return mode;\n      }\n      // This scope occurs on the server\n      if (defaultMode === 'system') {\n        return designSystemMode;\n      }\n      return defaultMode;\n    })();\n    const calculatedColorScheme = (() => {\n      if (!colorScheme) {\n        // This scope occurs on the server\n        if (calculatedMode === 'dark') {\n          return defaultDarkColorScheme;\n        }\n        // use light color scheme, if default mode is 'light' | 'system'\n        return defaultLightColorScheme;\n      }\n      return colorScheme;\n    })();\n\n    // 2. Create CSS variables and store them in objects (to be generated in stylesheets in the final step)\n    const {\n      css: rootCss,\n      vars: rootVars\n    } = generateCssVars();\n\n    // 3. Start composing the theme object\n    const theme = _extends({}, restThemeProp, {\n      components,\n      colorSchemes,\n      cssVarPrefix,\n      vars: rootVars,\n      getColorSchemeSelector: targetColorScheme => `[${attribute}=\"${targetColorScheme}\"] &`\n    });\n\n    // 4. Create color CSS variables and store them in objects (to be generated in stylesheets in the final step)\n    //    The default color scheme stylesheet is constructed to have the least CSS specificity.\n    //    The other color schemes uses selector, default as data attribute, to increase the CSS specificity so that they can override the default color scheme stylesheet.\n    const defaultColorSchemeStyleSheet = {};\n    const otherColorSchemesStyleSheet = {};\n    Object.entries(colorSchemes).forEach(([key, scheme]) => {\n      const {\n        css,\n        vars\n      } = generateCssVars(key);\n      theme.vars = deepmerge(theme.vars, vars);\n      if (key === calculatedColorScheme) {\n        // 4.1 Merge the selected color scheme to the theme\n        Object.keys(scheme).forEach(schemeKey => {\n          if (scheme[schemeKey] && typeof scheme[schemeKey] === 'object') {\n            // shallow merge the 1st level structure of the theme.\n            theme[schemeKey] = _extends({}, theme[schemeKey], scheme[schemeKey]);\n          } else {\n            theme[schemeKey] = scheme[schemeKey];\n          }\n        });\n        if (theme.palette) {\n          theme.palette.colorScheme = key;\n        }\n      }\n      const resolvedDefaultColorScheme = (() => {\n        if (typeof defaultColorScheme === 'string') {\n          return defaultColorScheme;\n        }\n        if (defaultMode === 'dark') {\n          return defaultColorScheme.dark;\n        }\n        return defaultColorScheme.light;\n      })();\n      if (key === resolvedDefaultColorScheme) {\n        if (excludeVariablesFromRoot) {\n          const excludedVariables = {};\n          excludeVariablesFromRoot(cssVarPrefix).forEach(cssVar => {\n            excludedVariables[cssVar] = css[cssVar];\n            delete css[cssVar];\n          });\n          defaultColorSchemeStyleSheet[`[${attribute}=\"${key}\"]`] = excludedVariables;\n        }\n        defaultColorSchemeStyleSheet[`${colorSchemeSelector}, [${attribute}=\"${key}\"]`] = css;\n      } else {\n        otherColorSchemesStyleSheet[`${colorSchemeSelector === ':root' ? '' : colorSchemeSelector}[${attribute}=\"${key}\"]`] = css;\n      }\n    });\n    theme.vars = deepmerge(theme.vars, rootVars);\n\n    // 5. Declaring effects\n    // 5.1 Updates the selector value to use the current color scheme which tells CSS to use the proper stylesheet.\n    React.useEffect(() => {\n      if (colorScheme && colorSchemeNode) {\n        // attaches attribute to <html> because the css variables are attached to :root (html)\n        colorSchemeNode.setAttribute(attribute, colorScheme);\n      }\n    }, [colorScheme, attribute, colorSchemeNode]);\n\n    // 5.2 Remove the CSS transition when color scheme changes to create instant experience.\n    // credit: https://github.com/pacocoursey/next-themes/blob/b5c2bad50de2d61ad7b52a9c5cdc801a78507d7a/index.tsx#L313\n    React.useEffect(() => {\n      let timer;\n      if (disableTransitionOnChange && hasMounted.current && documentNode) {\n        const css = documentNode.createElement('style');\n        css.appendChild(documentNode.createTextNode(DISABLE_CSS_TRANSITION));\n        documentNode.head.appendChild(css);\n\n        // Force browser repaint\n        (() => window.getComputedStyle(documentNode.body))();\n        timer = setTimeout(() => {\n          documentNode.head.removeChild(css);\n        }, 1);\n      }\n      return () => {\n        clearTimeout(timer);\n      };\n    }, [colorScheme, disableTransitionOnChange, documentNode]);\n    React.useEffect(() => {\n      hasMounted.current = true;\n      return () => {\n        hasMounted.current = false;\n      };\n    }, []);\n    const contextValue = React.useMemo(() => ({\n      allColorSchemes,\n      colorScheme,\n      darkColorScheme,\n      lightColorScheme,\n      mode,\n      setColorScheme,\n      setMode,\n      systemMode\n    }), [allColorSchemes, colorScheme, darkColorScheme, lightColorScheme, mode, setColorScheme, setMode, systemMode]);\n    let shouldGenerateStyleSheet = true;\n    if (disableStyleSheetGeneration || nested && (upperTheme == null ? void 0 : upperTheme.cssVarPrefix) === cssVarPrefix) {\n      shouldGenerateStyleSheet = false;\n    }\n    const element = /*#__PURE__*/_jsxs(React.Fragment, {\n      children: [shouldGenerateStyleSheet && /*#__PURE__*/_jsxs(React.Fragment, {\n        children: [/*#__PURE__*/_jsx(GlobalStyles, {\n          styles: {\n            [colorSchemeSelector]: rootCss\n          }\n        }), /*#__PURE__*/_jsx(GlobalStyles, {\n          styles: defaultColorSchemeStyleSheet\n        }), /*#__PURE__*/_jsx(GlobalStyles, {\n          styles: otherColorSchemesStyleSheet\n        })]\n      }), /*#__PURE__*/_jsx(ThemeProvider, {\n        themeId: scopedTheme ? themeId : undefined,\n        theme: resolveTheme ? resolveTheme(theme) : theme,\n        children: children\n      })]\n    });\n    if (nested) {\n      return element;\n    }\n    return /*#__PURE__*/_jsx(ColorSchemeContext.Provider, {\n      value: contextValue,\n      children: element\n    });\n  }\n  process.env.NODE_ENV !== \"production\" ? CssVarsProvider.propTypes = {\n    /**\n     * The body attribute name to attach colorScheme.\n     */\n    attribute: PropTypes.string,\n    /**\n     * The component tree.\n     */\n    children: PropTypes.node,\n    /**\n     * The node used to attach the color-scheme attribute\n     */\n    colorSchemeNode: PropTypes.any,\n    /**\n     * The CSS selector for attaching the generated custom properties\n     */\n    colorSchemeSelector: PropTypes.string,\n    /**\n     * localStorage key used to store `colorScheme`\n     */\n    colorSchemeStorageKey: PropTypes.string,\n    /**\n     * The initial color scheme used.\n     */\n    defaultColorScheme: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    /**\n     * The initial mode used.\n     */\n    defaultMode: PropTypes.string,\n    /**\n     * If `true`, the provider creates its own context and generate stylesheet as if it is a root `CssVarsProvider`.\n     */\n    disableNestedContext: PropTypes.bool,\n    /**\n     * If `true`, the style sheet won't be generated.\n     *\n     * This is useful for controlling nested CssVarsProvider behavior.\n     */\n    disableStyleSheetGeneration: PropTypes.bool,\n    /**\n     * Disable CSS transitions when switching between modes or color schemes.\n     */\n    disableTransitionOnChange: PropTypes.bool,\n    /**\n     * The document to attach the attribute to.\n     */\n    documentNode: PropTypes.any,\n    /**\n     * The key in the local storage used to store current color scheme.\n     */\n    modeStorageKey: PropTypes.string,\n    /**\n     * The window that attaches the 'storage' event listener.\n     * @default window\n     */\n    storageWindow: PropTypes.any,\n    /**\n     * The calculated theme object that will be passed through context.\n     */\n    theme: PropTypes.object\n  } : void 0;\n  const defaultLightColorScheme = typeof designSystemColorScheme === 'string' ? designSystemColorScheme : designSystemColorScheme.light;\n  const defaultDarkColorScheme = typeof designSystemColorScheme === 'string' ? designSystemColorScheme : designSystemColorScheme.dark;\n  const getInitColorSchemeScript = params => systemGetInitColorSchemeScript(_extends({\n    attribute: defaultAttribute,\n    colorSchemeStorageKey: defaultColorSchemeStorageKey,\n    defaultMode: designSystemMode,\n    defaultLightColorScheme,\n    defaultDarkColorScheme,\n    modeStorageKey: defaultModeStorageKey\n  }, params));\n  return {\n    CssVarsProvider,\n    useColorScheme,\n    getInitColorSchemeScript\n  };\n}","/**\n * The benefit of this function is to help developers get CSS var from theme without specifying the whole variable\n * and they does not need to remember the prefix (defined once).\n */\nexport default function createGetCssVar(prefix = '') {\n  function appendVar(...vars) {\n    if (!vars.length) {\n      return '';\n    }\n    const value = vars[0];\n    if (typeof value === 'string' && !value.match(/(#|\\(|\\)|(-?(\\d*\\.)?\\d+)(px|em|%|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc))|^(-?(\\d*\\.)?\\d+)$|(\\d+ \\d+ \\d+)/)) {\n      return `, var(--${prefix ? `${prefix}-` : ''}${value}${appendVar(...vars.slice(1))})`;\n    }\n    return `, ${value}`;\n  }\n\n  // AdditionalVars makes `getCssVar` less strict, so it can be use like this `getCssVar('non-mui-variable')` without type error.\n  const getCssVar = (field, ...fallbacks) => {\n    return `var(--${prefix ? `${prefix}-` : ''}${field}${appendVar(...fallbacks)})`;\n  };\n  return getCssVar;\n}","/**\n * This function create an object from keys, value and then assign to target\n *\n * @param {Object} obj : the target object to be assigned\n * @param {string[]} keys\n * @param {string | number} value\n *\n * @example\n * const source = {}\n * assignNestedKeys(source, ['palette', 'primary'], 'var(--palette-primary)')\n * console.log(source) // { palette: { primary: 'var(--palette-primary)' } }\n *\n * @example\n * const source = { palette: { primary: 'var(--palette-primary)' } }\n * assignNestedKeys(source, ['palette', 'secondary'], 'var(--palette-secondary)')\n * console.log(source) // { palette: { primary: 'var(--palette-primary)', secondary: 'var(--palette-secondary)' } }\n */\nexport const assignNestedKeys = (obj, keys, value, arrayKeys = []) => {\n  let temp = obj;\n  keys.forEach((k, index) => {\n    if (index === keys.length - 1) {\n      if (Array.isArray(temp)) {\n        temp[Number(k)] = value;\n      } else if (temp && typeof temp === 'object') {\n        temp[k] = value;\n      }\n    } else if (temp && typeof temp === 'object') {\n      if (!temp[k]) {\n        temp[k] = arrayKeys.includes(k) ? [] : {};\n      }\n      temp = temp[k];\n    }\n  });\n};\n\n/**\n *\n * @param {Object} obj : source object\n * @param {Function} callback : a function that will be called when\n *                   - the deepest key in source object is reached\n *                   - the value of the deepest key is NOT `undefined` | `null`\n *\n * @example\n * walkObjectDeep({ palette: { primary: { main: '#000000' } } }, console.log)\n * // ['palette', 'primary', 'main'] '#000000'\n */\nexport const walkObjectDeep = (obj, callback, shouldSkipPaths) => {\n  function recurse(object, parentKeys = [], arrayKeys = []) {\n    Object.entries(object).forEach(([key, value]) => {\n      if (!shouldSkipPaths || shouldSkipPaths && !shouldSkipPaths([...parentKeys, key])) {\n        if (value !== undefined && value !== null) {\n          if (typeof value === 'object' && Object.keys(value).length > 0) {\n            recurse(value, [...parentKeys, key], Array.isArray(value) ? [...arrayKeys, key] : arrayKeys);\n          } else {\n            callback([...parentKeys, key], value, arrayKeys);\n          }\n        }\n      }\n    });\n  }\n  recurse(obj);\n};\nconst getCssValue = (keys, value) => {\n  if (typeof value === 'number') {\n    if (['lineHeight', 'fontWeight', 'opacity', 'zIndex'].some(prop => keys.includes(prop))) {\n      // CSS property that are unitless\n      return value;\n    }\n    const lastKey = keys[keys.length - 1];\n    if (lastKey.toLowerCase().indexOf('opacity') >= 0) {\n      // opacity values are unitless\n      return value;\n    }\n    return `${value}px`;\n  }\n  return value;\n};\n\n/**\n * a function that parse theme and return { css, vars }\n *\n * @param {Object} theme\n * @param {{\n *  prefix?: string,\n *  shouldSkipGeneratingVar?: (objectPathKeys: Array<string>, value: string | number) => boolean\n * }} options.\n *  `prefix`: The prefix of the generated CSS variables. This function does not change the value.\n *\n * @returns {{ css: Object, vars: Object }} `css` is the stylesheet, `vars` is an object to get css variable (same structure as theme).\n *\n * @example\n * const { css, vars } = parser({\n *   fontSize: 12,\n *   lineHeight: 1.2,\n *   palette: { primary: { 500: 'var(--color)' } }\n * }, { prefix: 'foo' })\n *\n * console.log(css) // { '--foo-fontSize': '12px', '--foo-lineHeight': 1.2, '--foo-palette-primary-500': 'var(--color)' }\n * console.log(vars) // { fontSize: 'var(--foo-fontSize)', lineHeight: 'var(--foo-lineHeight)', palette: { primary: { 500: 'var(--foo-palette-primary-500)' } } }\n */\nexport default function cssVarsParser(theme, options) {\n  const {\n    prefix,\n    shouldSkipGeneratingVar\n  } = options || {};\n  const css = {};\n  const vars = {};\n  const varsWithDefaults = {};\n  walkObjectDeep(theme, (keys, value, arrayKeys) => {\n    if (typeof value === 'string' || typeof value === 'number') {\n      if (!shouldSkipGeneratingVar || !shouldSkipGeneratingVar(keys, value)) {\n        // only create css & var if `shouldSkipGeneratingVar` return false\n        const cssVar = `--${prefix ? `${prefix}-` : ''}${keys.join('-')}`;\n        Object.assign(css, {\n          [cssVar]: getCssValue(keys, value)\n        });\n        assignNestedKeys(vars, keys, `var(${cssVar})`, arrayKeys);\n        assignNestedKeys(varsWithDefaults, keys, `var(${cssVar}, ${value})`, arrayKeys);\n      }\n    }\n  }, keys => keys[0] === 'vars' // skip 'vars/*' paths\n  );\n  return {\n    css,\n    vars,\n    varsWithDefaults\n  };\n}","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _toPropertyKey from \"@babel/runtime/helpers/esm/toPropertyKey\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"colorSchemes\", \"components\", \"defaultColorScheme\"];\nimport deepmerge from '@mui/utils/deepmerge';\nimport cssVarsParser from './cssVarsParser';\nfunction prepareCssVars(theme, parserConfig) {\n  // @ts-ignore - ignore components do not exist\n  const {\n      colorSchemes = {},\n      defaultColorScheme = 'light'\n    } = theme,\n    otherTheme = _objectWithoutPropertiesLoose(theme, _excluded);\n  const {\n    vars: rootVars,\n    css: rootCss,\n    varsWithDefaults: rootVarsWithDefaults\n  } = cssVarsParser(otherTheme, parserConfig);\n  let themeVars = rootVarsWithDefaults;\n  const colorSchemesMap = {};\n  const {\n      [defaultColorScheme]: light\n    } = colorSchemes,\n    otherColorSchemes = _objectWithoutPropertiesLoose(colorSchemes, [defaultColorScheme].map(_toPropertyKey));\n  Object.entries(otherColorSchemes || {}).forEach(([key, scheme]) => {\n    const {\n      vars,\n      css,\n      varsWithDefaults\n    } = cssVarsParser(scheme, parserConfig);\n    themeVars = deepmerge(themeVars, varsWithDefaults);\n    colorSchemesMap[key] = {\n      css,\n      vars\n    };\n  });\n  if (light) {\n    // default color scheme vars should be merged last to set as default\n    const {\n      css,\n      vars,\n      varsWithDefaults\n    } = cssVarsParser(light, parserConfig);\n    themeVars = deepmerge(themeVars, varsWithDefaults);\n    colorSchemesMap[defaultColorScheme] = {\n      css,\n      vars\n    };\n  }\n  const generateCssVars = colorScheme => {\n    var _parserConfig$getSele2;\n    if (!colorScheme) {\n      var _parserConfig$getSele;\n      const css = _extends({}, rootCss);\n      return {\n        css,\n        vars: rootVars,\n        selector: (parserConfig == null || (_parserConfig$getSele = parserConfig.getSelector) == null ? void 0 : _parserConfig$getSele.call(parserConfig, colorScheme, css)) || ':root'\n      };\n    }\n    const css = _extends({}, colorSchemesMap[colorScheme].css);\n    return {\n      css,\n      vars: colorSchemesMap[colorScheme].vars,\n      selector: (parserConfig == null || (_parserConfig$getSele2 = parserConfig.getSelector) == null ? void 0 : _parserConfig$getSele2.call(parserConfig, colorScheme, css)) || ':root'\n    };\n  };\n  return {\n    vars: themeVars,\n    generateCssVars\n  };\n}\nexport default prepareCssVars;"],"names":["DEFAULT_MODE_STORAGE_KEY","DEFAULT_COLOR_SCHEME_STORAGE_KEY","DEFAULT_ATTRIBUTE","options","defaultMode","defaultLightColorScheme","defaultDarkColorScheme","modeStorageKey","colorSchemeStorageKey","attribute","colorSchemeNode","getSystemMode","mode","processState","state","callback","getColorScheme","initializeValue","key","defaultValue","value","e","useCurrentColorScheme","supportedColorSchemes","storageWindow","joinedColorSchemes","setState","initialMode","lightColorScheme","darkColorScheme","colorScheme","setMode","currentState","newMode","setColorScheme","newState","newLightColorScheme","newDarkColorScheme","error","handleMediaQuery","event","systemMode","mediaListener","handler","args","media","handleStorage","_excluded","DISABLE_CSS_TRANSITION","createCssVarsProvider","themeId","defaultTheme","defaultAttribute","defaultModeStorageKey","defaultColorSchemeStorageKey","designSystemMode","designSystemColorScheme","designSystemTransitionOnChange","resolveTheme","excludeVariablesFromRoot","ColorSchemeContext","useColorScheme","CssVarsProvider","props","children","themeProp","defaultColorScheme","disableTransitionOnChange","documentNode","colorSchemeSelector","disableNestedContext","disableStyleSheetGeneration","hasMounted","upperTheme","ctx","nested","scopedTheme","_ref","colorSchemes","components","generateCssVars","cssVarPrefix","restThemeProp","allColorSchemes","stateMode","stateColorScheme","calculatedMode","calculatedColorScheme","rootCss","rootVars","theme","targetColorScheme","defaultColorSchemeStyleSheet","otherColorSchemesStyleSheet","scheme","css","vars","deepmerge","schemeKey","resolvedDefaultColorScheme","excludedVariables","cssVar","timer","contextValue","shouldGenerateStyleSheet","element","GlobalStyles","ThemeProvider","params","createGetCssVar","prefix","appendVar","field","fallbacks","assignNestedKeys","obj","keys","arrayKeys","temp","k","index","walkObjectDeep","shouldSkipPaths","recurse","object","parentKeys","getCssValue","prop","cssVarsParser","shouldSkipGeneratingVar","varsWithDefaults","prepareCssVars","parserConfig","otherTheme","rootVarsWithDefaults","themeVars","colorSchemesMap","light","otherColorSchemes","_parserConfig$getSele2","_parserConfig$getSele"],"sourceRoot":""}